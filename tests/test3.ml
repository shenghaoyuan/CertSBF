open Interp_test

type test_case = {
  dis : string; 
  lp_std : int64 list;
  lm_std : int64 list;
  lc_std : int64 list;
  v : int64;
  fuel : int64;
  result_expected : int64;
}

let green = "\027[32m"  (* ANSI green *)
let red = "\027[31m"    (* ANSI red *)
let reset = "\027[0m"   (* Reset color *)

let run_test_case test_case =
  let v = Interp_test.int_of_standard_int test_case.v in
  let fuel = Interp_test.nat_of_int test_case.fuel in
  let res = Interp_test.int_of_standard_int test_case.result_expected in
  let lp = Interp_test.int_list_of_standard_int_list test_case.lp_std in
  let lm = Interp_test.int_list_of_standard_int_list test_case.lm_std in
  let lc = Interp_test.int_list_of_standard_int_list test_case.lc_std in
  let result = Interp_test.bpf_interp_test lp lm lc v fuel res in
  let color = if result then green else red in
  Printf.printf "%s%-25s result: %s%b%s\n" color test_case.dis color result reset


let test_cases = [
(*
    mov r2, 0xe
    ldxh r3, [r1+12]
    jne r3, 0x81, +2
    mov r2, 0x12
    ldxh r3, [r1+16]
    and r3, 0xffff
    jne r3, 0x8, +5
    add r1, r2
    mov r0, 0x1
    ldxw r1, [r1+16]
    and r1, 0xffffff
    jeq r1, 0x1a8c0, +1
    mov r0, 0x0
    exit
*)
  {
    dis = "test_subnet";
    lp_std = [0xb7L; 0x02L; 0x00L; 0x00L; 0x0eL; 0x00L; 0x00L; 0x00L; 0x69L; 0x13L; 0x0cL; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x55L; 0x03L; 0x02L; 0x00L; 0x81L; 0x00L; 0x00L; 0x00L; 0xb7L; 0x02L; 0x00L; 0x00L; 0x12L; 0x00L; 0x00L; 0x00L; 0x69L; 0x13L; 0x10L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x57L; 0x03L; 0x00L; 0x00L; 0xffL; 0xffL; 0x00L; 0x00L; 0x55L; 0x03L; 0x05L; 0x00L; 0x08L; 0x00L; 0x00L; 0x00L; 0x0fL; 0x21L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0xb7L; 0x00L; 0x00L; 0x00L; 0x01L; 0x00L; 0x00L; 0x00L; 0x61L; 0x11L; 0x10L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x57L; 0x01L; 0x00L; 0x00L; 0xffL; 0xffL; 0xffL; 0x00L; 0x15L; 0x01L; 0x01L; 0x00L; 0xc0L; 0xa8L; 0x01L; 0x00L; 0xb7L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x95L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L; 0x00L];
    lm_std = [0x0L; 0x0L; 0xc0L; 0x9fL; 0xa0L; 0x97L; 0x0L; 0xa0L; 0x3bL; 0xbfL; 0xfaL; 0x8L; 0x0L; 0x45L; 0x10L; 0x3cL; 0x46L; 0x3cL; 0x40L; 0x0L; 0x40L; 0x6L; 0x1cL; 0xc0L; 0xa8L; 0x1L; 0x2L; 0xc0L; 0xa8L; 0x1L; 0x6L; 0xeL; 0x0L; 0x17L; 0x99L; 0xc5L; 0xecL; 0x0L; 0x0L; 0x0L; 0x0L; 0xa0L; 0x2L; 0x78L; 0xe0L; 0xa3L; 0x0L; 0x0L; 0x2L; 0x4L; 0xb4L; 0x4L; 0x2L; 0x8L; 0xaL; 0x0L; 0x9cL; 0x24L; 0x0L; 0x0L; 0x0L; 0x0L; 0x1L; 0x3L; 0x0L];
    lc_std = [];
    v = 2L;
    fuel = 11L;
    result_expected = 0x1L;
  };
]

let () =
  List.iter run_test_case test_cases
